{
 "component": {
    "kind": "component",
    "scheme": "sjms",
    "syntax": "sjms:destinationType:destinationName",
    "title": "Simple JMS",
    "description": "The sjms component (simple jms) allows messages to be sent to (or consumed from) a JMS Queue or Topic.",
    "label": "messaging",
    "deprecated": "false",
    "async": "true",
    "javaType": "org.apache.camel.component.sjms.SjmsComponent",
    "groupId": "org.apache.camel",
    "artifactId": "camel-sjms",
    "version": "2.18.2"
  },
  "componentProperties": {
    "connectionFactory": { "kind": "property", "type": "object", "javaType": "javax.jms.ConnectionFactory", "deprecated": "false", "secret": "false", "description": "A ConnectionFactory is required to enable the SjmsComponent. It can be set directly or set set as part of a ConnectionResource." },
    "headerFilterStrategy": { "kind": "property", "type": "object", "javaType": "org.apache.camel.spi.HeaderFilterStrategy", "deprecated": "false", "secret": "false", "description": "To use a custom HeaderFilterStrategy to filter header to and from Camel message." },
    "connectionResource": { "kind": "property", "type": "object", "javaType": "org.apache.camel.component.sjms.jms.ConnectionResource", "deprecated": "false", "secret": "false", "description": "A ConnectionResource is an interface that allows for customization and container control of the ConnectionFactory. See Plugable Connection Resource Management for further details." },
    "connectionCount": { "kind": "property", "type": "integer", "javaType": "java.lang.Integer", "deprecated": "false", "secret": "false", "description": "The maximum number of connections available to endpoints started under this component" },
    "jmsKeyFormatStrategy": { "kind": "property", "type": "object", "javaType": "org.apache.camel.component.sjms.jms.JmsKeyFormatStrategy", "deprecated": "false", "secret": "false", "description": "Pluggable strategy for encoding and decoding JMS keys so they can be compliant with the JMS specification. Camel provides one implementation out of the box: default. The default strategy will safely marshal dots and hyphens (. and -). Can be used for JMS brokers which do not care whether JMS header keys contain illegal characters. You can provide your own implementation of the org.apache.camel.component.jms.JmsKeyFormatStrategy and refer to it using the notation." },
    "transactionCommitStrategy": { "kind": "property", "type": "object", "javaType": "org.apache.camel.component.sjms.TransactionCommitStrategy", "deprecated": "false", "secret": "false", "description": "To configure which kind of commit strategy to use. Camel provides two implementations out of the box default and batch." },
    "destinationCreationStrategy": { "kind": "property", "type": "object", "javaType": "org.apache.camel.component.sjms.jms.DestinationCreationStrategy", "deprecated": "false", "secret": "false", "description": "To use a custom DestinationCreationStrategy." },
    "timedTaskManager": { "kind": "property", "type": "object", "javaType": "org.apache.camel.component.sjms.taskmanager.TimedTaskManager", "deprecated": "false", "secret": "false", "description": "To use a custom TimedTaskManager" },
    "messageCreatedStrategy": { "kind": "property", "type": "object", "javaType": "org.apache.camel.component.sjms.jms.MessageCreatedStrategy", "deprecated": "false", "secret": "false", "description": "To use the given MessageCreatedStrategy which are invoked when Camel creates new instances of javax.jms.Message objects when Camel is sending a JMS message." }
  },
  "properties": {
    "destinationType": { "kind": "path", "group": "common", "type": "string", "javaType": "java.lang.String", "enum": [ "queue", "topic" ], "deprecated": "false", "secret": "false", "defaultValue": "queue", "description": "The kind of destination to use" },
    "destinationName": { "kind": "path", "group": "common", "required": "true", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "DestinationName is a JMS queue or topic name. By default the destinationName is interpreted as a queue name." },
    "acknowledgementMode": { "kind": "parameter", "group": "common", "type": "string", "javaType": "org.apache.camel.component.sjms.jms.SessionAcknowledgementType", "enum": [ "SESSION_TRANSACTED", "CLIENT_ACKNOWLEDGE", "AUTO_ACKNOWLEDGE", "DUPS_OK_ACKNOWLEDGE" ], "deprecated": "false", "secret": "false", "defaultValue": "AUTO_ACKNOWLEDGE", "description": "The JMS acknowledgement name which is one of: SESSION_TRANSACTED CLIENT_ACKNOWLEDGE AUTO_ACKNOWLEDGE DUPS_OK_ACKNOWLEDGE" },
    "bridgeErrorHandler": { "kind": "parameter", "group": "consumer", "label": "consumer", "type": "boolean", "javaType": "boolean", "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored." },
    "consumerCount": { "kind": "parameter", "group": "consumer", "label": "consumer", "type": "integer", "javaType": "int", "deprecated": "false", "secret": "false", "defaultValue": "1", "description": "Sets the number of consumer listeners used for this endpoint." },
    "durableSubscriptionId": { "kind": "parameter", "group": "consumer", "label": "consumer", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "Sets the durable subscription Id required for durable topics." },
    "synchronous": { "kind": "parameter", "group": "consumer", "label": "consumer", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "true", "description": "Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)." },
    "exceptionHandler": { "kind": "parameter", "group": "consumer (advanced)", "label": "consumer,advanced", "type": "object", "javaType": "org.apache.camel.spi.ExceptionHandler", "optionalPrefix": "consumer.", "deprecated": "false", "secret": "false", "description": "To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored." },
    "exchangePattern": { "kind": "parameter", "group": "consumer (advanced)", "label": "consumer,advanced", "type": "string", "javaType": "org.apache.camel.ExchangePattern", "enum": [ "InOnly", "RobustInOnly", "InOut", "InOptionalOut", "OutOnly", "RobustOutOnly", "OutIn", "OutOptionalIn" ], "deprecated": "false", "secret": "false", "description": "Sets the exchange pattern when the consumer creates an exchange." },
    "messageSelector": { "kind": "parameter", "group": "consumer (advanced)", "label": "consumer,advanced", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "Sets the JMS Message selector syntax." },
    "namedReplyTo": { "kind": "parameter", "group": "producer", "label": "producer", "type": "string", "javaType": "java.lang.String", "deprecated": "false", "secret": "false", "description": "Sets the reply to destination name used for InOut producer endpoints." },
    "persistent": { "kind": "parameter", "group": "producer", "label": "producer", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "true", "description": "Flag used to enable/disable message persistence." },
    "producerCount": { "kind": "parameter", "group": "producer", "label": "producer", "type": "integer", "javaType": "int", "deprecated": "false", "secret": "false", "defaultValue": "1", "description": "Sets the number of producers used for this endpoint." },
    "ttl": { "kind": "parameter", "group": "producer", "label": "producer", "type": "integer", "javaType": "long", "deprecated": "false", "secret": "false", "defaultValue": "-1", "description": "Flag used to adjust the Time To Live value of produced messages." },
    "allowNullBody": { "kind": "parameter", "group": "producer (advanced)", "label": "producer,advanced", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "true", "description": "Whether to allow sending messages with no body. If this option is false and the message body is null then an JMSException is thrown." },
    "prefillPool": { "kind": "parameter", "group": "producer (advanced)", "label": "producer,advanced", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "true", "description": "Whether to prefill the producer connection pool on startup or create connections lazy when needed." },
    "responseTimeOut": { "kind": "parameter", "group": "producer (advanced)", "label": "producer,advanced", "type": "integer", "javaType": "long", "deprecated": "false", "secret": "false", "defaultValue": "5000", "description": "Sets the amount of time we should wait before timing out a InOut response." },
    "asyncStartListener": { "kind": "parameter", "group": "advanced", "label": "advanced", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "Whether to startup the consumer message listener asynchronously when starting a route. For example if a JmsConsumer cannot get a connection to a remote JMS broker then it may block while retrying and/or failover. This will cause Camel to block while starting routes. By setting this option to true you will let routes startup while the JmsConsumer connects to the JMS broker using a dedicated thread in asynchronous mode. If this option is used then beware that if the connection could not be established then an exception is logged at WARN level and the consumer will not be able to receive messages; You can then restart the route to retry." },
    "asyncStopListener": { "kind": "parameter", "group": "advanced", "label": "advanced", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "Whether to stop the consumer message listener asynchronously when stopping a route." },
    "connectionCount": { "kind": "parameter", "group": "advanced", "label": "advanced", "type": "integer", "javaType": "java.lang.Integer", "deprecated": "false", "secret": "false", "description": "The maximum number of connections available to this endpoint" },
    "connectionFactory": { "kind": "parameter", "group": "advanced", "label": "advanced", "type": "object", "javaType": "javax.jms.ConnectionFactory", "deprecated": "false", "secret": "false", "description": "Initializes the connectionFactory for the endpoint which takes precedence over the component's connectionFactory if any" },
    "connectionResource": { "kind": "parameter", "group": "advanced", "label": "advanced", "type": "object", "javaType": "org.apache.camel.component.sjms.jms.ConnectionResource", "deprecated": "false", "secret": "false", "description": "Initializes the connectionResource for the endpoint which takes precedence over the component's connectionResource if any" },
    "destinationCreationStrategy": { "kind": "parameter", "group": "advanced", "label": "advanced", "type": "object", "javaType": "org.apache.camel.component.sjms.jms.DestinationCreationStrategy", "deprecated": "false", "secret": "false", "description": "To use a custom DestinationCreationStrategy." },
    "headerFilterStrategy": { "kind": "parameter", "group": "advanced", "label": "advanced", "type": "object", "javaType": "org.apache.camel.spi.HeaderFilterStrategy", "deprecated": "false", "secret": "false", "description": "To use a custom HeaderFilterStrategy to filter header to and from Camel message." },
    "includeAllJMSXProperties": { "kind": "parameter", "group": "advanced", "label": "advanced", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "Whether to include all JMSXxxx properties when mapping from JMS to Camel Message. Setting this to true will include properties such as JMSXAppID and JMSXUserID etc. Note: If you are using a custom headerFilterStrategy then this option does not apply." },
    "jmsKeyFormatStrategy": { "kind": "parameter", "group": "advanced", "label": "advanced", "type": "object", "javaType": "org.apache.camel.component.sjms.jms.JmsKeyFormatStrategy", "deprecated": "false", "secret": "false", "description": "Pluggable strategy for encoding and decoding JMS keys so they can be compliant with the JMS specification. Camel provides two implementations out of the box: default and passthrough. The default strategy will safely marshal dots and hyphens (. and -). The passthrough strategy leaves the key as is. Can be used for JMS brokers which do not care whether JMS header keys contain illegal characters. You can provide your own implementation of the org.apache.camel.component.jms.JmsKeyFormatStrategy and refer to it using the notation." },
    "mapJmsMessage": { "kind": "parameter", "group": "advanced", "label": "advanced", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "true", "description": "Specifies whether Camel should auto map the received JMS message to a suited payload type such as javax.jms.TextMessage to a String etc. See section about how mapping works below for more details." },
    "messageCreatedStrategy": { "kind": "parameter", "group": "advanced", "label": "advanced", "type": "object", "javaType": "org.apache.camel.component.sjms.jms.MessageCreatedStrategy", "deprecated": "false", "secret": "false", "description": "To use the given MessageCreatedStrategy which are invoked when Camel creates new instances of javax.jms.Message objects when Camel is sending a JMS message." },
    "transacted": { "kind": "parameter", "group": "transaction", "label": "consumer,transaction", "type": "boolean", "javaType": "boolean", "deprecated": "false", "secret": "false", "defaultValue": "false", "description": "Specifies whether to use transacted mode" },
    "transactionBatchCount": { "kind": "parameter", "group": "transaction", "label": "consumer,transaction", "type": "integer", "javaType": "int", "deprecated": "false", "secret": "false", "defaultValue": "-1", "description": "If transacted sets the number of messages to process before committing a transaction." },
    "transactionBatchTimeout": { "kind": "parameter", "group": "transaction", "label": "consumer,transaction", "type": "integer", "javaType": "long", "deprecated": "false", "secret": "false", "defaultValue": "5000", "description": "Sets timeout (in millis) for batch transactions the value should be 1000 or higher." },
    "transactionCommitStrategy": { "kind": "parameter", "group": "transaction", "label": "transaction", "type": "object", "javaType": "org.apache.camel.component.sjms.TransactionCommitStrategy", "deprecated": "false", "secret": "false", "description": "Sets the commit strategy." }
  }
}

